#include <includes.hpp>
#include <tools/gsc_vm.hpp>
#include <tools/gsc.hpp>
#include <tools/gsc_opcodes.hpp>

namespace {
	using namespace tool::gsc::opcode;
	void OpCode() {

		VmInfo* v8a = RegisterVM(VMI_JUP_8A, "Call of Duty: Modern Warfare III", "jup", "mwiiia", VmFlags::VMF_FOREACH_IW | VmFlags::VMF_HASH64 | VmFlags::VMF_NO_PARAM_FLAGS | VmFlags::VMF_FULL_FILE_NAMESPACE | VmFlags::VMF_HASH_IW | VmFlags::VMF_HASH_PATH_IW | VmFlags::VMF_CALL_NO_PARAMS | VmFlags::VMF_IW_CALLS | VmFlags::VMF_IW_LIKE | VmFlags::VMF_ISTRING);
		v8a->RegisterVmName("jupa", "s5a", "mwiiia", "modernwarfareiiia", "mw23a");
		v8a->AddPlatform(PLATFORM_PC);
		v8a->RegisterSameCodePlatform(PLATFORM_PC, PLATFORM_PLAYSTATION);
		v8a->RegisterVMGlobalVariable("level", OPCODE_IW_GetLevel);
		v8a->RegisterVMGlobalVariable("game", OPCODE_IW_GetGame);
		v8a->RegisterVMGlobalVariable("anim", OPCODE_IW_GetAnim);
		v8a->RegisterVMOperatorFunction("waittill", "<caller> waittill(event, var*)", OPCODE_IW_SingleWaitTill, VPFD_SELF_PARAM | VPFD_UNPACK, 1);
		v8a->RegisterVMOperatorFunction("isdefined", "isdefined(object) -> bool", OPCODE_IsDefined, VPFD_RETURN_VALUE, 1, 1);
		v8a->RegisterVMOperatorFunction("notify", "<caller> notify(event, param*)", OPCODE_IW_Notify, VPFD_SELF_PARAM | VPFD_USE_PRE_SCRIPT_CALL, 1);
		v8a->RegisterVMOperatorFunction("endon", "<caller> endon(event)", OPCODE_IW_SingleEndon, VPFD_SELF_PARAM, 1, 1);
		v8a->RegisterVMOperatorFunction("wait", "wait(time)", OPCODE_Wait, VPFD_NONE, 1, 1);
		v8a->RegisterVMOperatorFunction("waitframe", "waitframe()", OPCODE_IW_WaitFrame, VPFD_NONE, 0, 0);
		v8a->RegisterVMOperatorFunction("getthread", "getthread() -> thread", OPCODE_IW_GetThread, VPFD_RETURN_VALUE, 0, 0);
		v8a->RegisterVMOperatorFunction("istrue", "istrue(object) -> bool", OPCODE_IW_IsTrue, VPFD_RETURN_VALUE, 1, 1);
		v8a->RegisterVMOperatorFunction("waittillframeend", "waittillframeend()", OPCODE_WaitTillFrameEnd, VPFD_NONE, 0, 0);
		v8a->RegisterVMHashOPCode('#', OPCODE_GetHash, 8, [](const char* str) { return hash::Hash64(str); });
		v8a->RegisterVMHashOPCode('@', OPCODE_IW_GetDVarHash, 8, [](const char* str) { return hash::HashIWDVar(str); });
		v8a->RegisterVMHashOPCode('%', OPCODE_IW_GetResourceHash, 8, [](const char* str) { return hash::HashIWAsset(str); });
		v8a->RegisterVMHashOPCode('t', OPCODE_IW_GetTagHash, 4, [](const char* str) { return hash::HashX32(str); });
		v8a->RegisterVMHashOPCode('&', OPCODE_GetHash, 8, [](const char* str) { return hash::HashJupScr(str); });
		v8a->RegisterDevCall("assert", "assertmsg", "assertex", "println");
		v8a->RegisterDatatype("builtinfunction", "builtinmethod", "function", "string", "istring", "struct", "int", "float", "vector");
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CheckClearParams, 0x43);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x98);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_RegisterVariable, 0x2B, 0xA4);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_DevOp, 0x94);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_AddToArray, 0x24);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Bit_And, 0x7F);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Bit_Or, 0x10);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Bit_Xor, 0x87);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_BoolComplement, 0x6A);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_BoolNot, 0x6D, 0x97);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CallBuiltinFunction, 0x1e);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CallBuiltinMethod, 0x74);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CastBool, 0x50);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CastFieldObject, 0x1);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CheckClearParams, 0x43);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ClearArray, 0x4E);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ClearFieldVariable, 0x20);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ClearParams, 0x5e);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CreateArray, 0x61);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_CreateStruct, 0x62);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Dec, 0x0e);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_DecTop, 0x4F);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_DevblockBegin, 0x0);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Divide, 0x78);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_End, 0x34);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Equal, 0x11);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalArray, 0x32);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalArrayRef, 0x51);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalFieldVariable, 0x27);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalFieldVariableRef, 0x65);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalLocalVariableCached, 0x3D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_EvalLocalVariableRefCached, 0x68);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetByte, 0x17);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetFloat, 0x67);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetResolveFunction, 0x81);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetHash, 0x88);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetLongInteger, 0x8D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetNegByte, 0x48);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetNegUnsignedInteger, 0x8C);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetNegUnsignedShort, 0x47);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetSelf, 0x33);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetSelfObject, 0x2f);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetString, 0x70);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetUndefined, 0x1B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetUnsignedInteger, 0x41);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetUnsignedShort, 0x5D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetVector, 0x14);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetZero, 0x53);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GreaterThan, 0x0B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GreaterThanOrEqualTo, 0x4A);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Inc, 0x73);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IsDefined, 0x99);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_AddToStruct, 0x25);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_BuiltinFunctionCallPointer, 0x82);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_BuiltinMethodCallPointer, 0x2e);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_ClearFieldVariableRef, 0x7b);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EndSwitch, 0x4D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalAnimFieldVar, 0x08);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalAnimFieldVarRef, 0x7c);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalArrayCachedField, 0x7D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariable, 0x71);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLevelFieldVariableRef, 0x09);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalArrayCached, 0x5a);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached0, 0x37);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached1, 0x38);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached2, 0x39);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached3, 0x3A);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached4, 0x3B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableCached5, 0x3C);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalLocalVariableObjectCached, 0x40);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalSelfFieldVar, 0x35);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_EvalSelfFieldVarRef, 0x5);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetAnim, 0x75);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetAnimation, 0x80);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetAnimationTree, 0x59);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_GetAnimGRef, 0x58);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetBuiltinFunction, 0x2D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetBuiltinMethod, 0x4C);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetDVarHash, 0x8B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetGame, 0x30);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetGameRef, 0x07);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetIString, 0x56);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetLevel, 0x21);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetLevelGRef, 0x72);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetThread, 0xa);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetResourceHash, 0x8A);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetTagHash, 0x89);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_IsTrue, 0x9a);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_RegisterVariable, 0x2B, 0xA4);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SetAnimFieldVar, 0x44);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SetLevelFieldVariable, 0x31);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SetSelfFieldVar, 0x19);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SetWaittillVariableFieldCached, 0x23);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SingleEndon, 0x26);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_SingleWaitTill, 0x55);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_Switch, 0x76);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_WaitFrame, 0x6f);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_WaitTillMatch, 0xc);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Jump, 0x83);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_JumpOnFalse, 0x69);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_JumpOnFalseExpr, 0x1a);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_JumpOnTrue, 0x0F);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_JumpOnTrueExpr, 0x1d);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_LessThan, 0x6C);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_LessThanOrEqualTo, 0x36);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Minus, 0x46);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Modulus, 0x5B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Multiply, 0x7A);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_NotEqual, 0x86);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_Notify, 0x13);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Plus, 0x03);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_PreScriptCall, 0x16);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Return, 0x2a);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_SafeCreateLocalVariables, 0x98);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptFunctionCall, 0x57);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptFunctionCallPointer, 0x60);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodCall, 0x85);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodCallPointer, 0x42);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodThreadCall, 0x5c);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodThreadCallEndOn, 0x06);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointer, 0x5f);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptMethodThreadCallPointerEndOn, 0x15);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptThreadCall, 0x18);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptThreadCallEndOn, 0x79);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptThreadCallPointer, 0x6b);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ScriptThreadCallPointerEndOn, 0x3f);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_SetLocalVariableCached, 0x02);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_SetVariableField, 0x77);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ShiftLeft, 0x28);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_ShiftRight, 0x0D);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_SizeOf, 0x22);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Vector, 0x4B);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_Wait, 0x54);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_WaitTillFrameEnd, 0x6e);
		v8a->RegisterOpCode(PLATFORM_PC, OPCODE_IW_GetEmptyUnkE, 0x84);
	}


}
REGISTER_GSC_VM_OPCODES(mwiii_8a, OpCode);